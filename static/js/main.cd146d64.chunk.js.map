{"version":3,"sources":["serviceWorker.js","components/square.jsx","components/board.jsx","components/game.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Square","value","onClick","className","calculateWinner","squares","winner","wc","a","b","c","Board","state","Array","fill","xIsNext","id","this","setState","square","i","handleClick","player","statusMessage","getStatusHeader","Fragment","role","renderSquare","Component","Game","class","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+CCRSC,MARf,YAAqC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QACvB,OACE,4BAAQC,UAAU,SAASD,QAASA,GACjCD,ICsDP,SAASG,EAAgBC,GAavB,IAZA,IAAIC,EAAS,KAYb,MAXwB,CACtB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGT,eAAkC,CAA7B,IAAMC,EAAE,KAAqB,cACdA,EADc,GACzBC,EADyB,KACtBC,EADsB,KACnBC,EADmB,KAEhC,GAAIL,EAAQG,IAAMH,EAAQG,KAAOH,EAAQI,IAAMJ,EAAQG,KAAOH,EAAQK,GAAI,CACxEJ,EAASD,EAAQG,GACjB,OAIJ,OAAOF,EAGMK,M,4MA/EbC,MAAQ,CACNP,QAASQ,MAAM,GAAGC,KAAK,MACvBC,SAAS,G,0DAGCC,GACV,IAAMX,EAAO,YAAOY,KAAKL,MAAMP,SAC/B,IAAID,EAAgBC,KAAYA,EAAQW,GAAxC,CAIAX,EAAQW,GAAMC,KAAKL,MAAMG,QAAU,IAAM,IACzC,IAAMA,GAAWE,KAAKL,MAAMG,QAE5BE,KAAKC,SAAS,CAAEb,UAASU,e,mCAGdI,EAAQC,GAAI,IAAD,OACtB,OAAO,kBAAC,EAAD,CAAQnB,MAAOkB,EAAQjB,QAAS,kBAAM,EAAKmB,YAAYD,Q,sCAGhDE,EAAQP,GACtB,OAAOO,EAAM,4BAAwBA,GAAxB,qBAAiDP,EAAU,IAAM,O,+BAGtE,IAAD,EACsBE,KAAKL,MAA1BP,EADD,EACCA,QAASU,EADV,EACUA,QAEbQ,EAAgBN,KAAKO,gBAAgBpB,EAAgBa,KAAKL,MAAMP,SAAUU,GAE9E,OACE,kBAAC,IAAMU,SAAP,KACE,yBAAKtB,UAAU,0BAA0BuB,KAAK,SAC3CH,GAEH,yBAAKpB,UAAU,aACZc,KAAKU,aAAatB,EAAQ,GAAI,GAC9BY,KAAKU,aAAatB,EAAQ,GAAI,GAC9BY,KAAKU,aAAatB,EAAQ,GAAI,IAEjC,yBAAKF,UAAU,aACZc,KAAKU,aAAatB,EAAQ,GAAI,GAC9BY,KAAKU,aAAatB,EAAQ,GAAI,GAC9BY,KAAKU,aAAatB,EAAQ,GAAI,IAEjC,yBAAKF,UAAU,aACZc,KAAKU,aAAatB,EAAQ,GAAI,GAC9BY,KAAKU,aAAatB,EAAQ,GAAI,GAC9BY,KAAKU,aAAatB,EAAQ,GAAI,S,GAjDrBuB,aC2BLC,G,kNAzBbjB,MAAQ,G,uDAEN,OACE,0BAAMT,UAAU,mBACd,yBAAK2B,MAAM,0BACT,yBAAK3B,UAAU,WACf,yBAAKA,UAAU,UACb,yBAAK2B,MAAM,SACT,yBAAK3B,UAAU,QACb,yBAAKA,UAAU,cACb,gCACE,kBAAC,EAAD,QAGJ,yBAAKA,UAAU,iBAIrB,yBAAKA,UAAU,iB,GAnBNyB,c,MCGnBG,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SJ0H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cd146d64.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nfunction Square({ value, onClick }) {\n  return (\n    <button className=\"square\" onClick={onClick}>\n      {value}\n    </button>\n  );\n}\n\nexport default Square;\n","import React, { Component } from 'react';\nimport Square from './square';\n\nclass Board extends Component {\n  state = {\n    squares: Array(9).fill(null),\n    xIsNext: true\n  };\n\n  handleClick(id) {\n    const squares = [...this.state.squares];\n    if (calculateWinner(squares) || squares[id]) {\n      return;\n    }\n\n    squares[id] = this.state.xIsNext ? 'X' : 'O';\n    const xIsNext = !this.state.xIsNext;\n\n    this.setState({ squares, xIsNext });\n  }\n\n  renderSquare(square, i) {\n    return <Square value={square} onClick={() => this.handleClick(i)} />;\n  }\n\n  getStatusHeader(player, xIsNext) {\n    return player ? `Winner is player: ${player}` : `Next Payer ${xIsNext ? 'X' : 'O'}`;\n  }\n\n  render() {\n    const { squares, xIsNext } = this.state;\n\n    let statusMessage = this.getStatusHeader(calculateWinner(this.state.squares), xIsNext);\n\n    return (\n      <React.Fragment>\n        <div className=\"status alert alert-info\" role=\"alert\">\n          {statusMessage}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(squares[0], 0)}\n          {this.renderSquare(squares[1], 1)}\n          {this.renderSquare(squares[2], 2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(squares[3], 3)}\n          {this.renderSquare(squares[4], 4)}\n          {this.renderSquare(squares[5], 5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(squares[6], 6)}\n          {this.renderSquare(squares[7], 7)}\n          {this.renderSquare(squares[8], 8)}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  let winner = null;\n  const winCombinations = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n\n  for (const wc of winCombinations) {\n    const [a, b, c] = wc;\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      winner = squares[a];\n      break;\n    }\n  }\n\n  return winner;\n}\n\nexport default Board;\n","import React, { Component } from 'react';\nimport Board from './board';\nimport './game.css';\n\nclass Game extends Component {\n  state = {};\n  render() {\n    return (\n      <main className=\"container-fluid\">\n        <div class=\"row align-items-center\">\n          <div className=\"col-sm\" />\n          <div className=\"col-sm\">\n            <div class=\"card \">\n              <div className=\"game\">\n                <div className=\"game-board\">\n                  <center>\n                    <Board />\n                  </center>\n                </div>\n                <div className=\"game-info\" />\n              </div>\n            </div>\n          </div>\n          <div className=\"col-sm\" />\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Game from './components/game';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}